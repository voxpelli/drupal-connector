<?php
// $Id$

/**
 * @file
 * Connector module
 */

//TODO: Take variable_get('user_email_verification', TRUE) into account
//TODO: Add cron for updating information? Important for Facebook!

/**
 * Implementation of hook_theme().
 */
function connector_theme() {
  return array(
    'connector_one_click_block' => array(
      'template' => 'connector-one-click-block',
      'arguments' => array('buttons' => array()),
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function connector_block($op = 'list', $delta = 0) {
  global $user;

  if ($op == 'list') {
    $block['one_click_block']['info'] = t('Sign in with other site');
    return $block;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 'one_click_block':
        if (!$user->uid) {
          return array(
            'content' => theme('connector_one_click_block'),
          );
        }
        break;
    }
  }
}

/**
 * Implementation of hook_user().
 */
function connector_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'logout':
      $connectors = _connector_get_connectors();
      $connections = _connector_get_user_connections($user);
      foreach ($connections as $connection) {
        if (array_key_exists($connection->connector, $connectors)) {
          $connector = $connectors[$connection->connector];
          if (isset($connector['logout callback']) && is_callable($connector['logout callback'])) {
            call_user_func($connector['logout callback'], $connection->cid);
          }
        }
      }
      break;
  }
}

function _connector_get_connectors($connector = NULL) {
  static $connectors;

  if (!isset($connectors)) {
    $connectors = (array) module_invoke_all('connector');
    drupal_alter('connector', $connectors);
  }

  if ($connector) {
    if (array_key_exists($connector, $connectors)) {
      return $connectors[$connector];
    }
    else {
      return FALSE;
    }
  }

  return $connectors;
}

function _connector_get_user_connections($account) {
  $connectors = array();

  $result = db_query("SELECT authname FROM {authmap} WHERE module = 'connector' AND uid = %d", $account->uid);
  while ($row = db_fetch_object($result)) {
    $row = explode('::', $row->authname, 2);
    if (count($row) === 2) {
      $connectors[] = (object) array(
        'connector' => $row[0],
        'cid' => $row[1],
      );
    }
  }

  return $connectors;
}

function _connector_log_in($connector_name) {
  global $user;

  if (user_is_logged_in()) {
    return FALSE;
  }

  $connector = _connector_get_connectors($connector_name);
  if (!$connector) {
    return FALSE;
  }

  //Fetch connector ID
  if (isset($connector['id callback']) && is_callable($connector['id callback'])) {
    $cid = call_user_func($connector['id callback']);
  }

  if ($cid) {
    $account = user_external_load("$connector_name::$cid");
    if (!$account) {
      //Register user
      user_external_login_register("$connector_name::$cid", 'connector');
      _connector_information_update($user);
    }
    else {
      //Log in user
      user_external_login($account);
      _connector_information_update($user); //TODO: Remove this?
    }
    drupal_goto();
  }
}

function _connector_information_fetch($uid) {
  static $cache;

  if (is_object($uid)) {
    $uid = $uid->uid;
  }

  if (empty($cache)) {
    $cache = array();
  }

  if (!isset($cache[$uid])) {
    $result = db_result(db_query('SELECT name FROM {connector_name} WHERE uid = %d', array(
      ':uid' => $uid,
    )));
    $cache[$uid] = empty($result) ? FALSE : array('real name' => $result);
  }

  return $cache[$uid];
}

function _connector_information_update($account) {
  //TODO: Configure which information we want fetched
  //TODO: Configure fetching information from many sources
  $connections = _connector_get_user_connections($account);
  $connector   = _connector_get_connectors($connections[0]->connector);
  if ($connector) {
    if (isset($connector['information callback']) && is_callable($connector['information callback'])) {
      $info = call_user_func($connector['information callback'], $connections[0]->cid);
    }
    if (variable_get('user_pictures', 0) && isset($connector['avatar callback']) && is_callable($connector['avatar callback'])) {
      $avatar = call_user_func($connector['avatar callback'], $connections[0]->cid);
    }
  }

  if (!empty($info)) {
    if (!empty($info['real name'])) {
      $real_name = (object) array(
        'uid'     => $account->uid,
        'name'    => $info['real name'],
        'created' => time(),
      );
      drupal_write_record('connector_name', $real_name);
    }
  }

  if (!empty($avatar)) {
    $result = drupal_http_request($avatar);
    if ($result->code != 200) {
      watchdog('connector', 'Failed importing avatar for user @uid, code : @code',
      array('@uid' => $account->uid, '@code' => $result->code));
    }
    else {
      //Copied from file_save_data - needs to write the file before validating it
      $temp = file_directory_temp();
      // On Windows, tempnam() requires an absolute path, so we use realpath().
      $tmp_file = tempnam(realpath($temp), 'file');
      if (!$fp = fopen($tmp_file, 'wb')) {
        drupal_set_message(t('The file could not be created.'), 'error');
      }
      else {
        fwrite($fp, $result->data);
        fclose($fp);

        $file = new stdClass();
        $file->filename = file_munge_filename(trim(basename($tmp_file), '.'), 'jpg jpeg gif png', FALSE);
        $file->filepath = $tmp_file;
        $file->filemime = file_get_mimetype($tmp_file);
        $file->filesize = filesize($tmp_file);

        $errors = array();
        $errors += file_validate_is_image($file);
        $errors += file_validate_image_resolution($file, variable_get('user_picture_dimensions', '85x85'));
        $errors += file_validate_size($file, variable_get('user_picture_file_size', '30') * 1024);

        if (empty($errors)) {
          $info = image_get_info($file->filepath);
          $destination = file_create_path(variable_get('user_picture_path', 'pictures') . '/picture-' . $account->uid . '.' . $info['extension']);
          if (file_copy($file, $destination, FILE_EXISTS_REPLACE)) {
            if (isset($account->picture) && $account->picture != $destination && file_exists($account->picture)) {
              file_delete($account->picture);
            }
            user_save($account, array('picture' => $file->filepath));
          }
        }

        file_delete($tmp_file);
      }
    }
  }
}

function template_preprocess_connector_one_click_block(&$vars) {
  if (empty($vars['buttons'])) {
    $vars['buttons'] = array();
    $connectors = _connector_get_connectors();
    foreach ($connectors as $key => $connector) {
      if (isset($connector['button callback']) && is_callable($connector['button callback'])) {
        $vars['buttons'][] = call_user_func($connector['button callback']);
      }
    }
  }
}